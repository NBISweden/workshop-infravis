---
title: "Introduction to R Shiny"
author: Lokesh Mano
institute: NBIS, SciLifeLab
keywords: bioinformatics, course, workshop, scilifelab, nbis
format: 
  revealjs: 
    css: "assets/styles.css"
    slide-number: true
filters:
  - shinylive
---

## Setup {visibility="hidden"}

```{r}
#| echo: false
# load the packages you need
library(dplyr)
library(tidyr)
library(tidyverse)
library(ggplot2)
library(kableExtra)
library(gridExtra)
library(shiny)
```

## Contents 

* [Introduction to RShiny](#what-is-shiny)
* [Code Structure](#app-organization)
* [App execution](#app-execution)
* [UI](#ui)
* [Server](#server)
* [Reactivity](#reactivity)
* [Error Validation](#error-validation)
* [Download](#download-data)
* [Themes](#theming)
* [Deployment](#deployment)
* [Interactive documents](#interactive-documents-quarto)

## 

::: {.shiny-gallery-parent}

::: {.shiny-gallery-child}
![[K-means](https://gallery.shinyapps.io/050-kmeans-example/){.small} [sidebar, simple]{.badge .smaller}](assets/examples/kmeans.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[Movie explorer](https://gallery.shinyapps.io/051-movie-explorer/){.small} [sidebar, simple]{.badge .smaller}](assets/examples/movie-explorer.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[freeR](https://committedtotape.shinyapps.io/freeR/){.small} [simple]{.badge .smaller}](assets/examples/freer.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[SuperZip](https://gallery.shinyapps.io/063-superzip-example/){.small} [intermediate, geo]{.badge .smaller}](assets/examples/superzip.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[Workout creator](https://parmsam.shinyapps.io/MixThingsUp/){.small} [intermediate]{.badge .smaller} ](assets/examples/workout-generator.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[WildLift](https://abbiodiversity.shinyapps.io/WildLift/){.small} [intermediate, dashboard]{.badge .smaller}](assets/examples/wildlift.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[Covid tracker](https://vac-lshtm.shinyapps.io/ncov_tracker/){.small} [intermediate]{.badge .smaller} ](assets/examples/covid-tracker.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[Cashflow calc](https://cashflowcalc.com/){.small} [intermediate]{.badge .smaller} ](assets/examples/cashflow-calculator.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[Genome browser](https://gallery.shinyapps.io/genome_browser/){.small} [intermediate]{.badge .smaller} ](assets/examples/genome-browser.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[Species selection](https://thebeczone.ca/shiny/cciss/){.small} [adv]{.badge .smaller} ](assets/examples/climate-change.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[Protein structure](https://niels-van-der-velden.shinyapps.io/shinyNGLVieweR/){.small} [adv, dashboard]{.badge .smaller} ](assets/examples/protein-structure.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[Commute explorer](https://nz-stefan.shinyapps.io/commute-explorer-2/){.small} [adv, geo]{.badge .smaller} ](assets/examples/commute-explorer.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[Steam explorer](https://eki-anjo.shinyapps.io/steam-shiny/){.small} [adv, dashboard]{.badge .smaller}](assets/examples/steam-explorer.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[System pipe](https://tgirke.shinyapps.io/systemPipeShiny/){.small} [adv, dashboard]{.badge .smaller} ](assets/examples/system-pipe.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[Shark attack](https://mdubel.shinyapps.io/shark-attack/){.small} [adv]{.badge .smaller} ](assets/examples/shark-attack.jpg){group="shiny-examples"}
:::

:::


## What is shiny?

::: {.fragment}

* Interactive documents & web applications
* Completely created using R or Python
* Needs a live environment
* [shiny.posit.co/r/gallery/](https://shiny.posit.co/r/gallery/)
* [shinyapps.org](http://shinyapps.org/) 

:::

::: {.fragment}

### Usage

* [Standalone web applications](http://shiny.rstudio.com/gallery/see-more.html)
* [Dashboard/Flexboard](http://rstudio.github.io/shinydashboard/examples.html)
* [Interactive RMarkdown](https://shiny.posit.co/r/articles/build/rmarkdown/)
* [VScode extensions](https://shiny.posit.co/blog/posts/shiny-vscode-1.0.0/)

:::

::: {.fragment}

### App structure

* UI Layout
* UI Inputs (Widgets)
* UI Outputs
* Renderer
* Builder

:::

## App organization

**One file format**

```{r}
#| eval: false
#| filename: app.r
ui <- fluidPage()
server <- function(input,output) {}
shinyApp(ui=ui,server=server)
```

::: {.fragment}
**Two file format**

```{r}
#| eval: false
#| filename: ui.r
ui <- fluidPage()
```

```{r}
#| eval: false
#| filename: server.r     
server <- function(input,output) {}
```

:::

## App execution

- Run `shiny::runApp("path/to/folder")`

. . .

- Use `shinyApp()`

```{r}
#| eval: false

shinyApp(
  ui=fluidPage(),
  server=function(input,output) {}
)
```

. . .

- Running as a separate process from terminal

```         
R -e "shiny::runApp('~/shinyapp')"
```

. . .

- From Rmd file using `rmarkdown::run()`


## {.center}

[User Interface (UI)]{.largest}

## UI

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]
shinyApp(
ui=fluidPage(
  titlePanel("Title Panel"),
  sidebarLayout(
    sidebarPanel(
      helpText("Sidebar Panel")
    ),
    mainPanel(
      "hello"
    )
  )
),
server=function(input,output) {})
```

## Language of the web: HTML, CSS & Javascript

:::: {.columns}
::: {.column width="50%"}
**Hypertext Markup Language (HTML)**

- All UI code is translated to HTML
- Inspect with browser

```{r}
#| eval: false
sidebarPanel(helpText("Sidebar Panel"))
```

```
<div class="col-sm-4">
  <form class="well" role="complementary">
    <span class="help-block">Sidebar Panel</span>
  </form>
</div>
```
:::
::: {.column width="50%" .fragment}
**Cascading style sheet (CSS)**

- Shiny is built on [Bootstrap 3](https://getbootstrap.com/docs/3.3/)

![](assets/ui-nostyle.jpg)
:::
::::

## 

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]
shinyApp(
ui=fluidPage(
  titlePanel("Title Panel"),
  sidebarLayout(sidebarPanel(helpText("Sidebar Panel")),
    mainPanel(tabsetPanel(
                tabPanel("tab1",
                         fluidRow(
                           column(6,helpText("Col1")),
                           column(6,
                                  helpText("Col2"),
                                  fluidRow(
                                    column(4,style="background-color:#b0c6fb",helpText("Col1")),
                                    column(4,style="background-color:#ffa153",helpText("Col2")),
                                    column(4,style="background-color:#b1f6c6",helpText("Col3"))
                                  )
                           )
                         )
                ),
                tabPanel("tab2",
                         inputPanel(helpText("Input Panel"))
                ),
                tabPanel("tab3",
                  wellPanel(helpText("Well Panel"))
                )
              )
    )
  )
),
server=function(input,output) {})
```

## UI • Widgets • Input

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]

shinyApp(
ui=fluidPage(
  fluidRow(
    column(4,
           selectInput("select-input",
                       label="selectInput",
                       choices=c("A","B","C")),
    )
  )
),
server=function(input,output) {
})
```

::: {.fragment}

```{r}
#| eval: false
?selectInput
selectInput(inputId, label, choices, selected = NULL, multiple = FALSE, 
            selectize = TRUE, width = NULL, size = NULL
)
```

- Input ID has to be unique

:::


## UI • Widgets • Input

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]

shinyApp(
ui=fluidPage(
  fluidRow(
    column(4,
           fileInput("file-input","fileInput:"),
           selectInput("select-input",label="selectInput",choices=c("A","B","C")),
           sliderInput("slider-input",label="sliderInput",value=5,min=1,max=10),
           numericInput("numeric-input",label="numericInput",value=5,min=1,max=10),
           textInput("text-input",label="textInput"),
           textAreaInput("text-area-input",label="textAreaInput"),
           dateInput("date-input",label="dateInput"),
           dateRangeInput("date-range-input",label="dateRangeInput"),
           radioButtons("radio-button",label="radioButtons",choices=c("A","B","C"),inline=T),
           checkboxInput("checkbox","checkboxInput",value=FALSE),
           actionButton("action-button","Action"),
           hr(),
           submitButton()
    )
  )
),
server=function(input,output) {
})



```

[[Widgets gallery](https://shiny.posit.co/r/gallery/widgets/widget-gallery/)]{.smaller}

::: {.notes}
Widgets are visual objects on a page to allow for data input. Input and output variables.
:::


## UI • Widgets • Input Functions

:::: {.columns}
::: {.column width="50%"}
|Function|Description|
|---|---|
|`checkboxInput()`|Checkbox|
|`checkboxGroupInput()`|Checkbox group|
|`radioButtons()`|Radio buttons|
|`dateInput()`|Single date|
|`dateRangeInput()`|Date range|
|`fileInput()`|Upload file|
|`numericInput()`|Input number|
|`sliderInput()`|Input number|
:::
::: {.column width="50%"}
|Function|Description|
|---|---|
|`textInput()`|Single line text input|
|`textAreaInput()`|Multi-line text input|
|`passwordInput()`|Password input|
|`selectInput()`|Dropdown selection|
|`actionButton()`|Action button|
|`submitButton()`|Submit button|
|`tabsetPanel()`|Tabset panel|
|`navbarPage()`|Page with navbar|
:::
::::

[[Widgets gallery](https://shiny.posit.co/r/gallery/widgets/widget-gallery/)]{.smaller}

## UI • Widgets • Outputs

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]
shinyApp(
ui=fluidPage(
           textInput("text_input",label="textInput",value="hello world"),
           textOutput("text_output")
    ),
server=function(input, output) {
  output$text_output <- renderText({input$text_input})
})
```

::: {.fragment}

```{r}
#| eval: false
?textOutput
textOutput(outputId)
```

- Output ID has to be unique

:::

## UI • Widgets • Outputs

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]
shinyApp(
ui=fluidPage(fluidRow(column(5,
           textInput("text_input",label="textInput",value="<h3 style='color:red'>Red text</h3>"),
           hr(),
           htmlOutput("html_output"),
           textOutput("text_output"),
           verbatimTextOutput("verbatim_text_output"),
           tableOutput("table_output"),
           plotOutput("plot_output",width="300px",height="300px")
    ))),

server=function(input, output) {
  output$html_output <- renderText({input$text_input})
  output$text_output <- renderText({input$text_input})
  output$verbatim_text_output <- renderText({input$text_input})
  output$table_output <- renderTable({iris[1:3,1:3]})
  output$plot_output <- renderPlot({
    plot(iris[,1],iris[,2])
  })
})
```

## UI • Widgets • Output Functions

|Output|Renderer|Description|
|---|---|---|
|`textOutput()`|`renderText()`/`renderPrint()`|Standard text|
|`verbatimTextOutput()`|`renderText()`/`renderPrint()`|Monospaced text|
|`htmlOutput()`|`renderText()`/`renderPrint()`|HTML text output|
|`plotOutput()`|`renderPlot()`|Create and display image|
|`imageOutput()`|`renderImage()`|Display existing image|
|`tableOutput()`|`renderTable()`|Table output|
|`uiOutput()`|`renderUI()`|HTML components|

## A complete app

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]
shinyApp(
ui = fluidPage(
  h3("Temperature Converter"),
  numericInput("celsius", "Degrees Celsius:", value = 0),
  textOutput("fahrenheit")
),

server = function(input, output) {
  output$fahrenheit <- renderText({
    paste(input$celsius, "°C is ", (input$celsius * 9/5) + 32, " °F")
  })
})
```

## Dynamic UI

- UI elements are created conditionally using `uiOutput()`/`renderUI()`

::: {.fragment}

```{r}
#| eval: false
#| code-line-numbers: "4,10-16"
shinyApp(
ui=fluidPage(
  selectInput("type",label="Select input type", choices=c("Text","Number")),
  uiOutput("ui"),
  textOutput("text_output"),
),

server=function(input, output) {
  
 output$ui <- renderUI({
    if(input$type=="Text") {
      textInput("input_text","Enter text")
    }else{
      sliderInput("input_number", "Select number", value=5, min=1, max=10)
    }
  })
  
  output$text_output <- renderText({
    if(input$type=="Text") {
      input$input_text
    }else{
      input$input_number
    }
  })
})
```

:::

::: {.fragment}

- Other options include `conditionalPanel()`, `insertUI()` and `removeUI()`

:::

## Rendering UI

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]
shinyApp(
ui=fluidPage(
  selectInput("type", label="Select input type", choices=c("Text","Number")),
  uiOutput("ui"),
  textOutput("text_output"),
),

server=function(input, output) {
  
 output$ui <- renderUI({
    if(input$type=="Text") {
      textInput("input_text", "Enter text", value="hello")
    }else{
      sliderInput("input_number", "Select number", value=5, min=1, max=10)
    }
  })
  
  output$text_output <- renderText({
    if(input$type=="Text") {
      input$input_text
    }else{
      input$input_number
    }
  })
})
```

## Rendering UI

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]

shinyApp(
ui=fluidPage(
  selectInput("data",label="Select data",
              choices=c("mtcars","faithful","iris")),
  tableOutput("table"),
  uiOutput("ui")
),

server=function(input, output) {
  
  data <- reactive({ get(input$data, 'package:datasets') })
  
 output$ui <- renderUI({
  if(input$data=="iris") plotOutput("plot",width="400px")
  })
  
  output$plot <- renderPlot({hist(data()[, 1])})
  output$table <- renderTable({head(data())})
})






```

## Server

* `Server` is a function that assembles your `input` into `output` using R based code.
* Three rules to be followed to write a server function:

::: {.fragment}

**Rule 1:** Save objects to display to `output$`

![](../../assets/images/server1.png.svg){ width="70%" fig-align="center"}

:::

## Server

**Rule 2:** Build objects to display with `render*()`

* R-Code block (can even be an entire R script) between the braces `{}` inside the `render*()` function.

::: {.fragment}

```{r,eval=FALSE}
  output$hist <- renderPlot({
                    tile <- "histogram of 100 random numbers"
                    hist(rnorm(100), main = title)
                })
```
::: 

::: {.fragment}

:::: {.small}

[Different Render functions](https://rstudio.github.io/cheatsheets/html/shiny.html#outputs)

::::

:::

## Server

**Rule 3:** Use input values with `input$`

::: {.fragment}

![](../../assets/images/shiny-input.png){width="60%" fig-align="center"}

::: 

::: {.fragment}

![](../../assets/images/shiny-input2.png){width="60%" fig-align="center"}

::: 

## Reactivity

- Code doesn't always run line-by-line (Non-linear execution)
- Code executes when dependencies change

![](assets/reactivity/reactlog.png){width="50%"}  
[[reactlog](https://rstudio.github.io/reactlog/index.html)]{.smaller}

## Reactives

Functions with reactive context

- `reactive()`: Defines an expression
- `reactiveVal()`: Defines single value
- `reactiveValues()`: Defines a list of values

Regular function `fn <- function()`: Runs wherever it is is used  
Reactive function `fn <- reactive()`: Runs only when input changes

## Reactive dynamics

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]
shinyApp(
  ui=fluidPage(
    numericInput("num_input",label="Observations",value=50),
    textOutput("text_output")),
  server=function(input,output) {
    output$text_output <- renderText({
        mean(rnorm(input$num_input))
    })
  })
```

:::: {.r-stack}
::: {.fragment}
![](assets/reactivity/rg-1/1.jpg)

:::
::: {.fragment}

![](assets/reactivity/rg-1/2.jpg)

:::
::: {.fragment}

![](assets/reactivity/rg-1/3.jpg)

:::
::: {.fragment}

![](assets/reactivity/rg-1/4.jpg)

:::
::::

## Reactive dynamics

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]
shinyApp(
  ui=fluidPage(
    numericInput("num_input",label="Observations",value=50),
    textOutput("text_output1"), textOutput("text_output2")),
  server=function(input,output) {
    output$text_output1 <- renderText({
      mean(rnorm(input$num_input))
    })
    output$text_output2 <- renderText({
      mean(rnorm(input$num_input))
    })
  })
```

:::: {.r-stack}
::: {.fragment}
![](assets/reactivity/rg-2/1.jpg)

:::
::: {.fragment}

![](assets/reactivity/rg-2/2.jpg)

:::
::: {.fragment}

![](assets/reactivity/rg-2/3.jpg)

:::
::: {.fragment}

![](assets/reactivity/rg-2/4.jpg)

:::

::: {.fragment}

![](assets/reactivity/rg-2/5.jpg)

:::

::: {.fragment}

![](assets/reactivity/rg-2/6.jpg)

:::

::: {.fragment}

![](assets/reactivity/rg-2/7.jpg)

:::

::: {.fragment}

![](assets/reactivity/rg-2/8.jpg)

:::

::::

## Reactive dynamics

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]
shinyApp(
  ui=fluidPage(
    numericInput("num_input",label="Observations",value=50),
    textOutput("text_output1"), textOutput("text_output2")),
  server=function(input,output) {
    rand <- function(x) rnorm(x)
    output$text_output1 <- renderText({
      mean(rand(input$num_input))
    })
    output$text_output2 <- renderText({
      mean(rand(input$num_input))
    })
  })
```

![](assets/reactivity/rg-2/8.jpg)

## Reactive dynamics

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]
shinyApp(
  ui=fluidPage(
    numericInput("num_input",label="Observations",value=50),
    textOutput("text_output1"), textOutput("text_output2")
    ),
  server=function(input,output) {
    rand <- reactive({ rnorm(input$num_input) })
    output$text_output1 <- renderText({
      mean(rand())
    })
    output$text_output2 <- renderText({
      mean(rand())
    })
  })
```

:::: {.r-stack}
::: {.fragment}
![](assets/reactivity/rg-3/1.jpg)
:::

::: {.fragment}
![](assets/reactivity/rg-3/2.jpg)
:::

::: {.fragment}
![](assets/reactivity/rg-3/3.jpg)
:::

::: {.fragment}
![](assets/reactivity/rg-3/4.jpg)
:::

::: {.fragment}
![](assets/reactivity/rg-3/5.jpg)
:::

::: {.fragment}
![](assets/reactivity/rg-3/6.jpg)
:::

::: {.fragment}
![](assets/reactivity/rg-3/7.jpg)
:::

::: {.fragment}
![](assets/reactivity/rg-3/8.jpg)
:::

::: {.fragment}
![](assets/reactivity/rg-3/9.jpg)
:::

::: {.fragment}
![](assets/reactivity/rg-3/10.jpg)
:::

::: {.fragment}
![](assets/reactivity/rg-3/11.jpg)
:::

::: {.fragment}
![](assets/reactivity/rg-3/12.jpg)
:::

::::

::: {.notes}
Reactive functions can be use to share output from a common source. They can be used to reduce computation for demanding functions. Reactive values cannot be accessed from outside the reactive environment.

Try changing the reactive function

`rand <- reactive({ rnorm(input$num_input) })`

to a regular function

`rand <- function(){ rnorm(input$num_input) }`

Saving a reactlog,

```{r}
#| eval: false
# reset log
reactlogReset()
# run the app and exit
# save react log as text
dput(shiny::reactlog(), file = "assets/reactlog-reactivity-3.txt")
# open and visualize
"assets/reactlog-reactivity-3.txt" |>
  dget() |>
  reactlog::reactlog_show()
```

:::

## Reactive context

Reactive values cannot be accessed outside a reactive context

:::: {.columns}
::: {.column width="55%"}
```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]
shinyApp(
  ui = fluidPage(
    numericInput("num", "Enter number",
                 value = 1),
    textOutput("result")
  ),
  server = function(input, output) {
    val = input$num^2
    output$result <- renderText({
      paste("Squared number is:", val)
    })
  }
)
```
:::
::: {.column width="45%"}
![](assets/reactive-context-error.jpg)
:::
::::

## Reactive values

- `reactVal()` `reactValues()`
- Store reactive values that can be accessed from any reactive context

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]
shinyApp(
  ui = fluidPage(
    actionButton("add","Add"),
    actionButton("subtract","Subtract"),
    textOutput("counter")
  ),
  server = function(input, output) {
    reactive_values <- reactiveValues(counter = 0) 
    
    observeEvent(input$add, {
      reactive_values$counter <- reactive_values$counter + 1
    }) 
    observeEvent(input$subtract, {
      reactive_values$counter <- reactive_values$counter - 1
    }) 
  
    output$counter <- renderText({
      reactive_values$counter
    })
  }
)
```

## Controlling reactivity using action buttons

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]
shinyApp(
ui = fluidPage(
  h3("Temperature Converter"),
  numericInput("celsius", "Degrees Celsius:", value = 0),
  actionButton("btn_go", "Go!"),
  textOutput("fahrenheit")
),

server = function(input, output) {
  evr <- eventReactive(input$btn_go, {
    paste(input$celsius, "°C is ", (input$celsius * 9/5) + 32, " °F")
  })
  
  output$fahrenheit <- renderText({
    evr()
  })
  
  #output$fahrenheit <- renderText({
  #    paste(input$celsius, "°C is ", (input$celsius * 9/5) + 32, " °F")
  #  }) |>
  #  bindEvent(input$btn_go)
})
```

## Error validation

* Shiny returns an error with missing or incorrect values

:::: {.fragment} 

::: {.column width="65%"}
```{r,eval=FALSE}
shinyApp(
ui=fluidPage(
  selectInput("data_input",label="Select data",
              choices=c("","mtcars","faithful","iris")),
  tableOutput("table_output")
),
server=function(input, output) {
  getdata <- reactive({ get(input$data_input,'package:datasets') })
  output$table_output <- renderTable({head(getdata())})
})
```

:::

::: {.column width="5%"}
:::

::: {.column width="30%"}

![](../../assets/images/val1.png)

:::

::::

:::: {.fragment}

* Errors can be handled in a controlled manner

::::

## Error validation

::: {.incremental}

* `validate()` can be used to check input
* `validate()` using `need()`

:::

:::: {.fragment}

::: {.column width="65%"}

```{r, eval= FALSE}
shinyApp(
ui=fluidPage(
  selectInput("data_input",label="Select data",
              choices=c("","mtcars","faithful","iris")),
  tableOutput("table_output")
),
server=function(input, output) {
  getdata <- reactive({ 
  validate(need(try(input$data_input),"Please select a data set"))
    get(input$data_input,'package:datasets') 
    })
  output$table_output <- renderTable({head(getdata())})
})
```

:::

::: {.column width="5%"}
:::

::: {.column width="30%"}

![](../../assets/images/val2.png)

:::

::::

## Download • Data

* Add button and `downloadHandler()` function

```{r, eval=FALSE}
shinyApp(
ui=fluidPage(
  selectInput("data_input",label="Select data",
              choices=c("mtcars","faithful","iris")),
  textOutput("text_output"),
  downloadButton("button_download","Download")
),
server=function(input, output) {
  getdata <- reactive({ get(input$data_input, 'package:datasets') })
  output$text_output <- renderText(paste0("Selected dataset: ",input$data_input))
  
  output$button_download <- downloadHandler(
  filename = function() {
     paste0(input$data_input,".csv")
   },
  content = function(file) {
     write.csv(getdata(),file,row.names=FALSE,quote=F)
   })
})
```

* Run in system browser if Rstudio browser doesn't work

## Download • Plots

```{r, eval=FALSE}
shinyApp(
ui=fluidPage(
  selectInput("data_input",label="Select data",
              choices=c("mtcars","faithful","iris")),
  textOutput("text_output"),
  plotOutput("plot_output",width="400px"),
  downloadButton("button_download", "Download")
),
server=function(input, output) {
  getdata <- reactive({ get(input$data_input, 'package:datasets') })
  output$text_output <- renderText(paste0("Selected dataset: ",input$data_input))
  output$plot_output <- renderPlot({hist(getdata()[, 1])})
  
output$button_download <- downloadHandler(
  filename = function() {
    paste0(input$data_input,".png")
  },
  content = function(file) {
    png(file)
    hist(getdata()[, 1])
    dev.off()
  })
})
```


* Run in system browser if Rstudio browser doesn't work
* See usage of download buttons

## Theming

:::: {.columns}
::: {.column width="40%"}
- Use **shinythemes**

```{r}
#| eval: false
library(shinythemes)
fluidPage(theme = shinytheme("cerulean"))
```

- Live theme selector

```{r}
#| eval: false
library(shinythemes)
fluidPage(theme = shinythemes::themeSelector())
```

[[shinythemes](https://rstudio.github.io/shinythemes/)]{.smaller}
:::
::: {.column width="60%"}
```{shinylive-r}
#| standalone: true
#| viewerHeight: 650
webr::install("shinythemes")

shinyApp(
  ui = fluidPage(
    shinythemes::themeSelector(),
    sidebarPanel(
      textInput("txt", "Text input:", "text here"),
      sliderInput("slider", "Slider input:", 1, 100, 30),
      actionButton("action", "Button"),
      actionButton("action2", "Button2", class = "btn-primary")
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Tab 1"),
        tabPanel("Tab 2")
      )
    )
  ),
  server = function(input, output) {}
)
```
:::
::::

## Theming

- Use **bslib**

```{r}
#| eval: false
library(bslib)
ui <- page_fluid(
  theme = bs_theme(version = 5)
)
```

. . .

- Live theme selector

```{r}
#| eval: false
library(bslib)
bs_theme_preview()
```

[[bslib](https://rstudio.github.io/bslib/), [Bootswatch](https://bootswatch.com/)]{.smaller}

## Theming using custom CSS

- Insert in the head

```{r}
#| eval: false
ui <- fluidPage(
  tags$head(
    tags$style(HTML("
      @import url('https://fonts.googleapis.com/css2?family=Yusei+Magic&display=swap');
      h2 {
        font-family: 'Yusei Magic', sans-serif;
      }"))
  ))
```

. . .

- Add styles directly

```{r}
#| eval: false
ui <- fluidPage(h2("Old Faithful Geyser Data", style = "font-size: 2em;"))
```

. . .

- Load custom CSS file placed in `www/`

```{r}
#| eval: false
ui <- fluidPage(
  tags$head(tags$link(rel = "stylesheet", type = "text/css", href = "styles.css"))
)
```

[[CSS styling](https://shiny.posit.co/r/articles/build/css/)]{.smaller}


## Deployment

- R scripts
  - GitHub
  - R Package

. . .

- Container (Docker ...)

. . .

- Hosting
  - Shinyapps.io
  - Shiny Server (Free)
  - Shiny Server Pro
  - [SciLifeLab Serve](https://serve.scilifelab.se/apps/)

. . .

- Automatically deploying to shinyapps.io

## Shinyapps.io

```{r}
#| eval: false
library(rsconnect)
rsconnect::setAccountInfo(name="username", token="HDFGT46YF7TDT6474G47", secret="hdgTDF5FStgdkpJ")
deployApp(appName="name")
```

. . .

[[Shiny apps user guide](https://docs.rstudio.com/shinyapps.io/index.html), [Shiny server guide](https://docs.rstudio.com/shiny-server/)]{.smaller}

## Interactive documents • Quarto

````
---
title: "Interactive scatterplot"
format: html
server: shiny
---

```{{r}}
library(shiny)
library(ggplot2)

selectInput("x_var", "X-axis Variable:", choices=names(mtcars), selected = "hp"),
selectInput("y_var", "Y-axis Variable:", choices=names(mtcars), selected = "mpg"),
plotOutput("plot")
```

```{{r}}
#| context: server
output$plot <- renderPlot({
  ggplot(mtcars, aes_string(x = input$x_var, y = input$y_var)) +
    geom_point() +
    labs(title = "Interactive mtcars scatterplot", 
         x = input$x_var, 
         y = input$y_var)
})
```
````

## Interactive documents • Rmarkdown

- Shiny can run in RMarkdown documents. Set YAML `runtime: shiny`.  

````        
---
title: Interactive document
output: html_document
runtime: shiny
---
````

- Shiny widgets can be included directly  

````
```{{r}}
selectInput('n_breaks',label='Number of bins:',choices=c(10,20,35,50),selected=20)
```
````

## Interactive documents

- Whole shiny apps can be included directly  

```{{r}}
shinyApp(
  ui=fluidPage(),
  server=function(input,output) {}
)
```

. . .

- Hosted shiny apps can be embedded using `<iframe>`  

```         
<iframe src="https://user.shinyapps.io/app"></iframe>
```

## SciLifeLab Serve and RShiny NBIS

:::{.column width="50%"}
![](../../assets/images/scilifelab_serve.png)
:::

:::{.column width="50%"}
![](../../assets/images/nbis_rshiny.png)
:::

## Other topics

- [Extended task](https://rstudio.github.io/shiny/reference/ExtendedTask.html)
- [Shiny unit tests](https://shiny.posit.co/r/articles/improve/testing-overview/)
- [Applications of action buttons](https://shiny.posit.co/r/articles/build/action-buttons/)  
- [Progress indicators](https://shiny.posit.co/r/articles/build/progress/)  
- [Shinylive](https://shinylive.io)
- [ShinyUIEditor](https://rstudio.github.io/shinyuieditor/)
- ...

## Extensions

- [Naxstats](https://github.com/nanxstats/awesome-shiny-extensions): Repo collection of shiny extensions
- [bslib](https://rstudio.github.io/bslib): Bootswatch themes for shiny
- [shinyurl](https://github.com/aoles/shinyURL): using URLs to recreate state of an app
- [shinypod](https://github.com/ijlyttle/shinypod): Reusable modules
- [shinyjs](https://deanattali.com/shinyjs/): Custom javascript functionality
- [shinyWidgets](https://github.com/dreamRs/shinyWidgets): Bootstrap 3 custom widgets
- [shinyBS](https://github.com/ebailey78/shinyBS): Bootstrap 3 widgets
- [shinymanager](https://datastorm-open.github.io/shinymanager/): Authentication for shiny apps
- ...

## Learning & community

:::: {.columns}
::: {.column width="50%"}
**Documentation**

- [Posit Shiny home](https://shiny.posit.co/) 
- [Posit Shiny articles](https://shiny.posit.co/r/articles/)

**Books**

![](assets/mastering-shiny.png){height="250px"} ![](https://engineering-shiny.org/img/engineering-shiny.jpeg){height="250px"}

- [Mastering Shiny Book](https://mastering-shiny.org/index.html)
- [Engineering Shiny Apps](https://engineering-shiny.org/index.html)
- [Shiny Interfaces](https://unleash-shiny.rinterface.com/index.html)
- [Mastering shiny solutions](https://mastering-shiny-solutions.org/)
:::
::: {.column width="50%"}
**Conferences**

- [Appsilon: ShinyConf](https://www.shinyconf.com/)
- [Jumping Rivers: Shiny in Production](https://shiny-in-production.jumpingrivers.com/)

**Blogs & Podcasts**

- [Posit Shiny Blog](https://shiny.posit.co/blog/)
- [Shiny Developer Series](https://shinydevseries.com/)
:::
::::

## {background-image="../../assets/images/precourse/data_viz_adv_2.jpeg"}

::: {.center-xy}

### Thank you. Questions? {style="text-align: center;"}
Slide inspirations: Roy Francis (NBIS, RaukR2024)

:::


