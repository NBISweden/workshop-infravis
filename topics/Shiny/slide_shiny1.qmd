---
title: "Introduction to R Shiny"
author: Lokesh Mano
institute: NBIS, SciLifeLab
keywords: bioinformatics, course, workshop, scilifelab, nbis
format: 
  revealjs: 
    css: "assets/styles.css"
    slide-number: true
filters:
  - shinylive
---

## Setup {visibility="hidden"}

```{r}
#| echo: false
# load the packages you need
library(dplyr)
library(tidyr)
library(tidyverse)
library(ggplot2)
library(kableExtra)
library(gridExtra)
library(shiny)
```

## Contents 

* [Introduction to RShiny](#what-is-shiny)
* [Code Structure](#app-organization)
* [App execution](#app-execution)
* [UI](#ui)
  * [Dynamic UI](#dynamic-ui)
* [Server](#server)

## 

::: {.shiny-gallery-parent}

::: {.shiny-gallery-child}
![[K-means](https://gallery.shinyapps.io/050-kmeans-example/){.small} [sidebar, simple]{.badge .smaller}](assets/examples/kmeans.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[Movie explorer](https://gallery.shinyapps.io/051-movie-explorer/){.small} [sidebar, simple]{.badge .smaller}](assets/examples/movie-explorer.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[freeR](https://committedtotape.shinyapps.io/freeR/){.small} [simple]{.badge .smaller}](assets/examples/freer.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[SuperZip](https://gallery.shinyapps.io/063-superzip-example/){.small} [intermediate, geo]{.badge .smaller}](assets/examples/superzip.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[Workout creator](https://parmsam.shinyapps.io/MixThingsUp/){.small} [intermediate]{.badge .smaller} ](assets/examples/workout-generator.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[WildLift](https://abbiodiversity.shinyapps.io/WildLift/){.small} [intermediate, dashboard]{.badge .smaller}](assets/examples/wildlift.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[Covid tracker](https://vac-lshtm.shinyapps.io/ncov_tracker/){.small} [intermediate]{.badge .smaller} ](assets/examples/covid-tracker.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[Cashflow calc](https://cashflowcalc.com/){.small} [intermediate]{.badge .smaller} ](assets/examples/cashflow-calculator.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[Genome browser](https://gallery.shinyapps.io/genome_browser/){.small} [intermediate]{.badge .smaller} ](assets/examples/genome-browser.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[Species selection](https://thebeczone.ca/shiny/cciss/){.small} [adv]{.badge .smaller} ](assets/examples/climate-change.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[Protein structure](https://niels-van-der-velden.shinyapps.io/shinyNGLVieweR/){.small} [adv, dashboard]{.badge .smaller} ](assets/examples/protein-structure.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[Commute explorer](https://nz-stefan.shinyapps.io/commute-explorer-2/){.small} [adv, geo]{.badge .smaller} ](assets/examples/commute-explorer.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[Steam explorer](https://eki-anjo.shinyapps.io/steam-shiny/){.small} [adv, dashboard]{.badge .smaller}](assets/examples/steam-explorer.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[System pipe](https://tgirke.shinyapps.io/systemPipeShiny/){.small} [adv, dashboard]{.badge .smaller} ](assets/examples/system-pipe.jpg){group="shiny-examples"}
:::

::: {.shiny-gallery-child}
![[Shark attack](https://mdubel.shinyapps.io/shark-attack/){.small} [adv]{.badge .smaller} ](assets/examples/shark-attack.jpg){group="shiny-examples"}
:::

:::


## What is shiny?

::: {.fragment}

* Interactive documents & web applications
* Completely created using R or Python
* Needs a live environment
* [shiny.posit.co/r/gallery/](https://shiny.posit.co/r/gallery/)
* [shinyapps.org](http://shinyapps.org/) 

:::

::: {.fragment}

### Usage

* [Standalone web applications](http://shiny.rstudio.com/gallery/see-more.html)
* [Dashboard/Flexboard](http://rstudio.github.io/shinydashboard/examples.html)
* [Interactive RMarkdown](https://shiny.posit.co/r/articles/build/rmarkdown/)
* [VScode extensions](https://shiny.posit.co/blog/posts/shiny-vscode-1.0.0/)

:::

::: {.fragment}

### App structure

* UI Layout
* UI Inputs (Widgets)
* UI Outputs
* Renderer
* Builder

:::

## App organization

**One file format**

```{r}
#| eval: false
#| filename: app.r
ui <- fluidPage()
server <- function(input,output) {}
shinyApp(ui=ui,server=server)
```

::: {.fragment}
**Two file format**

```{r}
#| eval: false
#| filename: ui.r
ui <- fluidPage()
```

```{r}
#| eval: false
#| filename: server.r     
server <- function(input,output) {}
```

:::

## App execution

- Run `shiny::runApp("path/to/folder")`

. . .

- Use `shinyApp()`

```{r}
#| eval: false

shinyApp(
  ui=fluidPage(),
  server=function(input,output) {}
)
```

. . .

- Running as a separate process from terminal

```         
R -e "shiny::runApp('~/shinyapp')"
```

. . .

- From Rmd file using `rmarkdown::run()`


## {.center}

[User Interface (UI)]{.largest}

## UI

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]
shinyApp(
ui=fluidPage(
  titlePanel("Title Panel"),
  sidebarLayout(
    sidebarPanel(
      helpText("Sidebar Panel")
    ),
    mainPanel(
      "hello"
    )
  )
),
server=function(input,output) {})
```

## Language of the web: HTML, CSS & Javascript

:::: {.columns}
::: {.column width="50%"}
**Hypertext Markup Language (HTML)**

- All UI code is translated to HTML
- Inspect with browser

```{r}
#| eval: false
sidebarPanel(helpText("Sidebar Panel"))
```

```
<div class="col-sm-4">
  <form class="well" role="complementary">
    <span class="help-block">Sidebar Panel</span>
  </form>
</div>
```
:::
::: {.column width="50%" .fragment}
**Cascading style sheet (CSS)**

- Shiny is built on [Bootstrap 3](https://getbootstrap.com/docs/3.3/)

![](assets/ui-nostyle.jpg)
:::
::::

## 

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]
shinyApp(
ui=fluidPage(
  titlePanel("Title Panel"),
  sidebarLayout(sidebarPanel(helpText("Sidebar Panel")),
    mainPanel(tabsetPanel(
                tabPanel("tab1",
                         fluidRow(
                           column(6,helpText("Col1")),
                           column(6,
                                  helpText("Col2"),
                                  fluidRow(
                                    column(4,style="background-color:#b0c6fb",helpText("Col1")),
                                    column(4,style="background-color:#ffa153",helpText("Col2")),
                                    column(4,style="background-color:#b1f6c6",helpText("Col3"))
                                  )
                           )
                         )
                ),
                tabPanel("tab2",
                         inputPanel(helpText("Input Panel"))
                ),
                tabPanel("tab3",
                  wellPanel(helpText("Well Panel"))
                )
              )
    )
  )
),
server=function(input,output) {})
```

## UI • Widgets • Input

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]

shinyApp(
ui=fluidPage(
  fluidRow(
    column(4,
           selectInput("select-input",
                       label="selectInput",
                       choices=c("A","B","C")),
    )
  )
),
server=function(input,output) {
})
```

::: {.fragment}

```{r}
#| eval: false
?selectInput
selectInput(inputId, label, choices, selected = NULL, multiple = FALSE, 
            selectize = TRUE, width = NULL, size = NULL
)
```

- Input ID has to be unique

:::


## UI • Widgets • Input

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]

shinyApp(
ui=fluidPage(
  fluidRow(
    column(4,
           fileInput("file-input","fileInput:"),
           selectInput("select-input",label="selectInput",choices=c("A","B","C")),
           sliderInput("slider-input",label="sliderInput",value=5,min=1,max=10),
           numericInput("numeric-input",label="numericInput",value=5,min=1,max=10),
           textInput("text-input",label="textInput"),
           textAreaInput("text-area-input",label="textAreaInput"),
           dateInput("date-input",label="dateInput"),
           dateRangeInput("date-range-input",label="dateRangeInput"),
           radioButtons("radio-button",label="radioButtons",choices=c("A","B","C"),inline=T),
           checkboxInput("checkbox","checkboxInput",value=FALSE),
           actionButton("action-button","Action"),
           hr(),
           submitButton()
    )
  )
),
server=function(input,output) {
})



```

[[Widgets gallery](https://shiny.posit.co/r/gallery/widgets/widget-gallery/)]{.smaller}

::: {.notes}
Widgets are visual objects on a page to allow for data input. Input and output variables.
:::


## UI • Widgets • Input Functions

:::: {.columns}
::: {.column width="50%"}
|Function|Description|
|---|---|
|`checkboxInput()`|Checkbox|
|`checkboxGroupInput()`|Checkbox group|
|`radioButtons()`|Radio buttons|
|`dateInput()`|Single date|
|`dateRangeInput()`|Date range|
|`fileInput()`|Upload file|
|`numericInput()`|Input number|
|`sliderInput()`|Input number|
:::
::: {.column width="50%"}
|Function|Description|
|---|---|
|`textInput()`|Single line text input|
|`textAreaInput()`|Multi-line text input|
|`passwordInput()`|Password input|
|`selectInput()`|Dropdown selection|
|`actionButton()`|Action button|
|`submitButton()`|Submit button|
|`tabsetPanel()`|Tabset panel|
|`navbarPage()`|Page with navbar|
:::
::::

[[Widgets gallery](https://shiny.posit.co/r/gallery/widgets/widget-gallery/)]{.smaller}

## UI • Widgets • Outputs

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]
shinyApp(
ui=fluidPage(
           textInput("text_input",label="textInput",value="hello world"),
           textOutput("text_output")
    ),
server=function(input, output) {
  output$text_output <- renderText({input$text_input})
})
```

::: {.fragment}

```{r}
#| eval: false
?textOutput
textOutput(outputId)
```

- Output ID has to be unique

:::

## UI • Widgets • Outputs

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]
shinyApp(
ui=fluidPage(fluidRow(column(5,
           textInput("text_input",label="textInput",value="<h3 style='color:red'>Red text</h3>"),
           hr(),
           htmlOutput("html_output"),
           textOutput("text_output"),
           verbatimTextOutput("verbatim_text_output"),
           tableOutput("table_output"),
           plotOutput("plot_output",width="300px",height="300px")
    ))),

server=function(input, output) {
  output$html_output <- renderText({input$text_input})
  output$text_output <- renderText({input$text_input})
  output$verbatim_text_output <- renderText({input$text_input})
  output$table_output <- renderTable({iris[1:3,1:3]})
  output$plot_output <- renderPlot({
    plot(iris[,1],iris[,2])
  })
})
```

## UI • Widgets • Output Functions

|Output|Renderer|Description|
|---|---|---|
|`textOutput()`|`renderText()`/`renderPrint()`|Standard text|
|`verbatimTextOutput()`|`renderText()`/`renderPrint()`|Monospaced text|
|`htmlOutput()`|`renderText()`/`renderPrint()`|HTML text output|
|`plotOutput()`|`renderPlot()`|Create and display image|
|`imageOutput()`|`renderImage()`|Display existing image|
|`tableOutput()`|`renderTable()`|Table output|
|`uiOutput()`|`renderUI()`|HTML components|

## A complete app

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]
shinyApp(
ui = fluidPage(
  h3("Temperature Converter"),
  numericInput("celsius", "Degrees Celsius:", value = 0),
  textOutput("fahrenheit")
),

server = function(input, output) {
  output$fahrenheit <- renderText({
    paste(input$celsius, "°C is ", (input$celsius * 9/5) + 32, " °F")
  })
})
```

## Dynamic UI

- UI elements are created conditionally using `uiOutput()`/`renderUI()`

::: {.fragment}

```{r}
#| eval: false
#| code-line-numbers: "4,10-16"
shinyApp(
ui=fluidPage(
  selectInput("type",label="Select input type", choices=c("Text","Number")),
  uiOutput("ui"),
  textOutput("text_output"),
),

server=function(input, output) {
  
 output$ui <- renderUI({
    if(input$type=="Text") {
      textInput("input_text","Enter text")
    }else{
      sliderInput("input_number", "Select number", value=5, min=1, max=10)
    }
  })
  
  output$text_output <- renderText({
    if(input$type=="Text") {
      input$input_text
    }else{
      input$input_number
    }
  })
})
```

:::

::: {.fragment}

- Other options include `conditionalPanel()`, `insertUI()` and `removeUI()`

:::

## Rendering UI

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]
shinyApp(
ui=fluidPage(
  selectInput("type", label="Select input type", choices=c("Text","Number")),
  uiOutput("ui"),
  textOutput("text_output"),
),

server=function(input, output) {
  
 output$ui <- renderUI({
    if(input$type=="Text") {
      textInput("input_text", "Enter text", value="hello")
    }else{
      sliderInput("input_number", "Select number", value=5, min=1, max=10)
    }
  })
  
  output$text_output <- renderText({
    if(input$type=="Text") {
      input$input_text
    }else{
      input$input_number
    }
  })
})
```

## Rendering UI

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]

shinyApp(
ui=fluidPage(
  selectInput("data",label="Select data",
              choices=c("mtcars","faithful","iris")),
  tableOutput("table"),
  uiOutput("ui")
),

server=function(input, output) {
  
  data <- reactive({ get(input$data, 'package:datasets') })
  
 output$ui <- renderUI({
  if(input$data=="iris") plotOutput("plot",width="400px")
  })
  
  output$plot <- renderPlot({hist(data()[, 1])})
  output$table <- renderTable({head(data())})
})






```

## Rendering UI

```{shinylive-r}
#| standalone: true
#| components: [editor, viewer]

shinyApp(
ui=fluidPage(
  sliderInput("persons",label="Select number of persons", value=1, min=1,max=4),
  uiOutput("ui")
),

server=function(input, output) {
  output$ui <- renderUI({
    lapply(1:input$persons, function(i) {
         div(
           textInput(paste0("name",i),"Enter name:",paste0("Person ",i)),
           textInput(paste0("tel",i),"Enter phone number:",value = "0773921562"),
           hr()
         )
    })
  })
})
```

## Server

* `Server` is a function that assembles your `input` into `output` using R based code.
* Three rules to be followed to write a server function:

::: {.fragment}

**Rule 1:** Save objects to display to `output$`

![](../../assets/images/server1.png.svg){ width="70%" fig-align="center"}

:::

## Server

**Rule 2:** Build objects to display with `render*()`

* R-Code block (can even be an entire R script) between the braces `{}` inside the `render*()` function.

::: {.fragment}

```{r,eval=FALSE}
  output$hist <- renderPlot({
                    tile <- "histogram of 100 random numbers"
                    hist(rnorm(100), main = title)
                })
```
::: 

::: {.fragment}

:::: {.small}

[Different Render functions](https://rstudio.github.io/cheatsheets/html/shiny.html#outputs)

::::

:::

## Server

**Rule 3:** Use input values with `input$`

::: {.fragment}

![](../../assets/images/shiny-input.png){width="60%" fig-align="center"}

::: 

::: {.fragment}

![](../../assets/images/shiny-input2.png){width="60%" fig-align="center"}

::: 

## {background-image="../../assets/images/precourse/data_viz_adv_2.jpeg"}

::: {.center-xy}

### Thank you. Questions? {style="text-align: center;"}
Slide inspirations: Roy Francis (NBIS, RaukR2024)

:::


